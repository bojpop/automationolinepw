name: Playwright Tests
on:
  workflow_dispatch
jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v3
      - name: Setup Node
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Cache Playwright Binaries
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies
        id: install-dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
      - name: Install Playwright Browsers
        id: install-playwright-browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
  test:
    name: Tests - ${{ matrix.project }} - Shard ${{ matrix.shardIndex }} of ${{ matrix.shardTotal }}
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [install]
    strategy:
      matrix:
        project: [chromium, firefox]
        shardIndex: [1, 2]
        shardTotal: [2]
    steps:
      - name: Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v3
      - name: Setup Node
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Cache Playwright Binaries
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}
      - name: Install Playwright System Dependencies
        id: install-playwright-system-dependencies
        run: npx playwright install-deps ${{ matrix.project }}
      - name: Run Playwright tests
        run: npx playwright test --project=${{ matrix.project }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        env:
          ENV: prod
          PWTEST_BLOB_REPORT_NAME: ${{ matrix.project }}
      - name: Upload Playwright Blob Report
        id: upload-playwright-blob-report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-all-blob-reports
          path: playwright-blob-report
          if-no-files-found: ignore
          retention-days: 1
      - name: Upload allure results
        id: upload-allure-results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: allure-results-${{ matrix.project }}-${{ matrix.shardIndex }}_${{ matrix.shardTotal }}
          path: allure-results/
          if-no-files-found: ignore
          retention-days: 1
  report:
    name: Create report
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 30
    permissions:
      contents: write
      pages: write
      id-token: write
    concurrency:
      group: 'pages'
      cancel-in-progress: true
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout Repository
        id: checkout-repository
        uses: actions/checkout@v4
      - name: Setup Node
        id: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Cache Playwright Binaries
        id: cache-playwright
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}
      - name: Download Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v3
      - name: Merge Playwright HTML Reports
        id: merge-playwright-html-reports
        run: npx playwright merge-reports --reporter html ./playwright-all-blob-reports      
      - name: Create allure-results directory
        run: |
          # Create a directory to store the unpacked results
          mkdir -p allure-results
      - name: Move artifacts to appropriate folders
        id: move-to-allure-results
        run: |
          mv allure-results-chromium-1_2/* allure-results/
          mv allure-results-chromium-2_2/* allure-results/
          mv allure-results-firefox-1_2/* allure-results/
          mv allure-results-firefox-2_2/* allure-results/
        shell: bash
      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages  
      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        id: allure-report
        with:
          allure_results: allure-results/
          gh_pages: gh-pages
          allure_report: reports/allure-report
          allure_history: reports/allure-history
          keep_reports: 20
      # - name: Copy Historical Data
      #   run: |
      #     if [ -d gh-pages/allure-history ]; then
      #       cp -r gh-pages/allure-history/. reports/allure-report/history
      #     fi
      # - name: Store Historical Data as Artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: allure-history
      #     path: reports/allure-report/history
      # - name: Deploy
      #   if: always()
      #   uses: peaceiris/actions-gh-pages@v3
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     publish_branch: gh-pages
      #     publish_dir: reports/allure-history
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: reports/allure-report/history
      # - name: Move to Reports folder
      #   id: move-to-reports-folder
      #   run: |
      #     mv playwright-report reports/playwright
      #   shell: bash
      # - name: Setup Pages
      #   id: setup-pages
      #   uses: actions/configure-pages@v3
      # - name: Upload Pages Artifact
      #   id: upload-pages-artifact
      #   uses: actions/upload-pages-artifact@v2
      #   with:
      #     path: reports/
      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v2
      - name: Delete Unnecessary Artifacts
        id: delete-unnecessary-artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            playwright-report-*
            test-results-*
            allure-report-*
            allure-results-*
          failOnError: false

